// <auto-generated />
using System;
using AbpShop.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Volo.Abp.EntityFrameworkCore;

namespace AbpShop.Migrations
{
    [DbContext(typeof(AbpShopMigrationsDbContext))]
    [Migration("20200820082756_Initial app db")]
    partial class Initialappdb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.MySql)
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AbpShop.AbpArticle", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("AddTime")
                        .IsRequired()
                        .HasColumnName("add_time")
                        .HasColumnType("varchar(255)");

                    b.Property<uint>("AdminId")
                        .HasColumnName("admin_id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Author")
                        .HasColumnName("author")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Cid")
                        .HasColumnName("cid")
                        .HasColumnType("varchar(255)");

                    b.Property<byte>("Hide")
                        .HasColumnName("hide")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<string>("ImageInput")
                        .IsRequired()
                        .HasColumnName("image_input")
                        .HasColumnType("varchar(255)");

                    b.Property<byte>("IsBanner")
                        .HasColumnName("is_banner")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<byte>("IsHot")
                        .HasColumnName("is_hot")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<uint?>("MerId")
                        .HasColumnName("mer_id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int(10)");

                    b.Property<string>("ShareSynopsis")
                        .HasColumnName("share_synopsis")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ShareTitle")
                        .HasColumnName("share_title")
                        .HasColumnType("varchar(255)");

                    b.Property<uint>("Sort")
                        .HasColumnName("sort")
                        .HasColumnType("int(10) unsigned");

                    b.Property<byte>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<string>("Synopsis")
                        .HasColumnName("synopsis")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Url")
                        .HasColumnName("url")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Visit")
                        .HasColumnName("visit")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("abp_article");
                });

            modelBuilder.Entity("AbpShop.AbpArticleCategory", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("AddTime")
                        .IsRequired()
                        .HasColumnName("add_time")
                        .HasColumnType("varchar(255)");

                    b.Property<byte>("Hidden")
                        .HasColumnName("hidden")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnName("image")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Intr")
                        .HasColumnName("intr")
                        .HasColumnType("varchar(255)");

                    b.Property<byte>("IsDel")
                        .HasColumnName("is_del")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<int>("Pid")
                        .HasColumnName("pid")
                        .HasColumnType("int(11)");

                    b.Property<uint>("Sort")
                        .HasColumnName("sort")
                        .HasColumnType("int(10) unsigned");

                    b.Property<byte>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("abp_article_category");
                });

            modelBuilder.Entity("AbpShop.AbpArticleContent", b =>
                {
                    b.Property<uint>("Nid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("nid")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("content")
                        .HasColumnType("text");

                    b.HasKey("Nid");

                    b.ToTable("abp_article_content");
                });

            modelBuilder.Entity("AbpShop.AbpCache", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnName("key")
                        .HasColumnType("varchar(32)");

                    b.Property<int?>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(10)");

                    b.Property<int>("ExpireTime")
                        .HasColumnName("expire_time")
                        .HasColumnType("int(11)");

                    b.Property<string>("Result")
                        .HasColumnName("result")
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.ToTable("abp_cache");
                });

            modelBuilder.Entity("AbpShop.AbpDiy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int?>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(11)");

                    b.Property<bool?>("IsDel")
                        .HasColumnName("is_del")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(255)");

                    b.Property<bool?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Type")
                        .HasColumnName("type")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("int(11)");

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .HasColumnName("version")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("abp_diy");
                });

            modelBuilder.Entity("AbpShop.AbpExpress", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("mediumint(11) unsigned");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsShow")
                        .HasColumnName("is_show")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Sort")
                        .HasColumnName("sort")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("abp_express");
                });

            modelBuilder.Entity("AbpShop.AbpQrcode", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("AddTime")
                        .IsRequired()
                        .HasColumnName("add_time")
                        .HasColumnType("varchar(255)");

                    b.Property<uint>("ExpireSeconds")
                        .HasColumnName("expire_seconds")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("QrcodeUrl")
                        .IsRequired()
                        .HasColumnName("qrcode_url")
                        .HasColumnType("varchar(255)");

                    b.Property<uint>("Scan")
                        .HasColumnName("scan")
                        .HasColumnType("int(10) unsigned");

                    b.Property<byte>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<uint>("ThirdId")
                        .HasColumnName("third_id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<string>("ThirdType")
                        .IsRequired()
                        .HasColumnName("third_type")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Ticket")
                        .IsRequired()
                        .HasColumnName("ticket")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Type")
                        .HasColumnName("type")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("url")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("abp_qrcode");
                });

            modelBuilder.Entity("AbpShop.AbpRoutineAccessToken", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnName("access_token")
                        .HasColumnType("varchar(256)");

                    b.Property<uint>("StopTime")
                        .HasColumnName("stop_time")
                        .HasColumnType("int(11) unsigned");

                    b.HasKey("Id");

                    b.ToTable("abp_routine_access_token");
                });

            modelBuilder.Entity("AbpShop.AbpRoutineFormId", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<string>("FormId")
                        .IsRequired()
                        .HasColumnName("form_id")
                        .HasColumnType("varchar(36)");

                    b.Property<byte?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<uint?>("StopTime")
                        .HasColumnName("stop_time")
                        .HasColumnType("int(11) unsigned");

                    b.Property<int?>("Uid")
                        .HasColumnName("uid")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("abp_routine_form_id");
                });

            modelBuilder.Entity("AbpShop.AbpRoutineQrcode", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Page")
                        .HasColumnName("page")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("QrcodeUrl")
                        .HasColumnName("qrcode_url")
                        .HasColumnType("varchar(255)");

                    b.Property<byte?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<uint>("ThirdId")
                        .HasColumnName("third_id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<string>("ThirdType")
                        .IsRequired()
                        .HasColumnName("third_type")
                        .HasColumnType("varchar(32)");

                    b.Property<uint?>("UrlTime")
                        .HasColumnName("url_time")
                        .HasColumnType("int(11) unsigned");

                    b.HasKey("Id");

                    b.ToTable("abp_routine_qrcode");
                });

            modelBuilder.Entity("AbpShop.AbpShippingTemplates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(11)");

                    b.Property<bool>("Appoint")
                        .HasColumnName("appoint")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Sort")
                        .HasColumnName("sort")
                        .HasColumnType("int(11)");

                    b.Property<bool?>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("abp_shipping_templates");
                });

            modelBuilder.Entity("AbpShop.AbpShippingTemplatesFree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int>("CityId")
                        .HasColumnName("city_id")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("Number")
                        .HasColumnName("number")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProvinceId")
                        .HasColumnName("province_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("TempId")
                        .HasColumnName("temp_id")
                        .HasColumnType("int(11)");

                    b.Property<bool?>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Uniqid")
                        .IsRequired()
                        .HasColumnName("uniqid")
                        .HasColumnType("varchar(32)");

                    b.HasKey("Id");

                    b.ToTable("abp_shipping_templates_free");
                });

            modelBuilder.Entity("AbpShop.AbpShippingTemplatesRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int>("CityId")
                        .HasColumnName("city_id")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("Continue")
                        .HasColumnName("continue")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("ContinuePrice")
                        .HasColumnName("continue_price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("First")
                        .HasColumnName("first")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("FirstPrice")
                        .HasColumnName("first_price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProvinceId")
                        .HasColumnName("province_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("TempId")
                        .HasColumnName("temp_id")
                        .HasColumnType("int(11)");

                    b.Property<bool?>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Uniqid")
                        .IsRequired()
                        .HasColumnName("uniqid")
                        .HasColumnType("varchar(32)");

                    b.HasKey("Id");

                    b.ToTable("abp_shipping_templates_region");
                });

            modelBuilder.Entity("AbpShop.AbpSmsRecord", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<string>("AddIp")
                        .IsRequired()
                        .HasColumnName("add_ip")
                        .HasColumnType("varchar(16)");

                    b.Property<uint>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(11) unsigned");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("content")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasColumnType("char(11)");

                    b.Property<uint>("RecordId")
                        .HasColumnName("record_id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint?>("Resultcode")
                        .HasColumnName("resultcode")
                        .HasColumnType("int(6) unsigned");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnName("template")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnName("uid")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("abp_sms_record");
                });

            modelBuilder.Entity("AbpShop.AbpStoreBargain", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint?>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(11) unsigned");

                    b.Property<decimal?>("BargainMaxPrice")
                        .HasColumnName("bargain_max_price")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<decimal?>("BargainMinPrice")
                        .HasColumnName("bargain_min_price")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<uint>("BargainNum")
                        .HasColumnName("bargain_num")
                        .HasColumnType("int(11) unsigned");

                    b.Property<decimal?>("Cost")
                        .HasColumnName("cost")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<decimal>("GiveIntegral")
                        .HasColumnName("give_integral")
                        .HasColumnType("decimal(10,2) unsigned");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnName("image")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnName("images")
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Info")
                        .HasColumnName("info")
                        .HasColumnType("varchar(255)");

                    b.Property<byte>("IsDel")
                        .HasColumnName("is_del")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<byte>("IsHot")
                        .HasColumnName("is_hot")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<byte>("IsPostage")
                        .HasColumnName("is_postage")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<uint?>("Look")
                        .HasColumnName("look")
                        .HasColumnType("int(11) unsigned");

                    b.Property<decimal?>("MinPrice")
                        .HasColumnName("min_price")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<uint?>("Num")
                        .HasColumnName("num")
                        .HasColumnType("int(11) unsigned");

                    b.Property<decimal?>("Postage")
                        .HasColumnName("postage")
                        .HasColumnType("decimal(10,2) unsigned");

                    b.Property<decimal?>("Price")
                        .HasColumnName("price")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<uint>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<int>("Quota")
                        .HasColumnName("quota")
                        .HasColumnType("int(10)");

                    b.Property<int>("QuotaShow")
                        .HasColumnName("quota_show")
                        .HasColumnType("int(10)");

                    b.Property<string>("Rule")
                        .HasColumnName("rule")
                        .HasColumnType("text");

                    b.Property<uint?>("Sales")
                        .HasColumnName("sales")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint?>("Share")
                        .HasColumnName("share")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("Sort")
                        .HasColumnName("sort")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("int(11) unsigned");

                    b.Property<byte>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<uint?>("Stock")
                        .HasColumnName("stock")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("StopTime")
                        .HasColumnName("stop_time")
                        .HasColumnType("int(11) unsigned");

                    b.Property<string>("StoreName")
                        .HasColumnName("store_name")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("TempId")
                        .HasColumnName("temp_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UnitName")
                        .HasColumnName("unit_name")
                        .HasColumnType("varchar(16)");

                    b.Property<decimal?>("Volume")
                        .HasColumnName("volume")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal?>("Weight")
                        .HasColumnName("weight")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("Id");

                    b.ToTable("abp_store_bargain");
                });

            modelBuilder.Entity("AbpShop.AbpStoreBargainUser", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint?>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint?>("BargainId")
                        .HasColumnName("bargain_id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<decimal?>("BargainPrice")
                        .HasColumnName("bargain_price")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal?>("BargainPriceMin")
                        .HasColumnName("bargain_price_min")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<bool>("IsDel")
                        .HasColumnName("is_del")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal?>("Price")
                        .HasColumnName("price")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<byte>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<uint?>("Uid")
                        .HasColumnName("uid")
                        .HasColumnType("int(11) unsigned");

                    b.HasKey("Id");

                    b.ToTable("abp_store_bargain_user");
                });

            modelBuilder.Entity("AbpShop.AbpStoreBargainUserHelp", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint?>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint?>("BargainId")
                        .HasColumnName("bargain_id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint?>("BargainUserId")
                        .HasColumnName("bargain_user_id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<decimal?>("Price")
                        .HasColumnName("price")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<uint?>("Uid")
                        .HasColumnName("uid")
                        .HasColumnType("int(11) unsigned");

                    b.HasKey("Id");

                    b.ToTable("abp_store_bargain_user_help");
                });

            modelBuilder.Entity("AbpShop.AbpStoreCart", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint(8) unsigned");

                    b.Property<uint>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("BargainId")
                        .HasColumnName("bargain_id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<ushort>("CartNum")
                        .HasColumnName("cart_num")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<uint?>("CombinationId")
                        .HasColumnName("combination_id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<bool>("IsDel")
                        .HasColumnName("is_del")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsNew")
                        .HasColumnName("is_new")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPay")
                        .HasColumnName("is_pay")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProductAttrUnique")
                        .IsRequired()
                        .HasColumnName("product_attr_unique")
                        .HasColumnType("varchar(16)");

                    b.Property<uint>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("SeckillId")
                        .HasColumnName("seckill_id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("varchar(32)");

                    b.Property<uint>("Uid")
                        .HasColumnName("uid")
                        .HasColumnType("int(10) unsigned");

                    b.HasKey("Id");

                    b.ToTable("abp_store_cart");
                });

            modelBuilder.Entity("AbpShop.AbpStoreCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("mediumint(11)");

                    b.Property<int>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(11)");

                    b.Property<string>("CateName")
                        .IsRequired()
                        .HasColumnName("cate_name")
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("IsShow")
                        .IsRequired()
                        .HasColumnName("is_show")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Pic")
                        .IsRequired()
                        .HasColumnName("pic")
                        .HasColumnType("varchar(128)");

                    b.Property<int>("Pid")
                        .HasColumnName("pid")
                        .HasColumnType("mediumint(11)");

                    b.Property<int>("Sort")
                        .HasColumnName("sort")
                        .HasColumnType("mediumint(11)");

                    b.HasKey("Id");

                    b.ToTable("abp_store_category");
                });

            modelBuilder.Entity("AbpShop.AbpStoreCombination", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("AddTime")
                        .IsRequired()
                        .HasColumnName("add_time")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Attr")
                        .HasColumnName("attr")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("Browse")
                        .HasColumnName("browse")
                        .HasColumnType("int(11)");

                    b.Property<byte>("Combination")
                        .HasColumnName("combination")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<uint>("Cost")
                        .HasColumnName("cost")
                        .HasColumnType("int(10) unsigned");

                    b.Property<int>("EffectiveTime")
                        .HasColumnName("effective_time")
                        .HasColumnType("int(11)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnName("image")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnName("images")
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnName("info")
                        .HasColumnType("varchar(255)");

                    b.Property<byte>("IsDel")
                        .HasColumnName("is_del")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<byte>("IsHost")
                        .HasColumnName("is_host")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<byte>("IsPostage")
                        .HasColumnName("is_postage")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<byte>("IsShow")
                        .HasColumnName("is_show")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<uint?>("MerId")
                        .HasColumnName("mer_id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<byte?>("MerUse")
                        .HasColumnName("mer_use")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<int?>("Num")
                        .HasColumnName("num")
                        .HasColumnType("int(11)");

                    b.Property<uint>("People")
                        .HasColumnName("people")
                        .HasColumnType("int(2) unsigned");

                    b.Property<decimal>("Postage")
                        .HasColumnName("postage")
                        .HasColumnType("decimal(10,2) unsigned");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("decimal(10,2) unsigned");

                    b.Property<uint>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<int>("Quota")
                        .HasColumnName("quota")
                        .HasColumnType("int(10)");

                    b.Property<int>("QuotaShow")
                        .HasColumnName("quota_show")
                        .HasColumnType("int(10)");

                    b.Property<uint>("Sales")
                        .HasColumnName("sales")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("Sort")
                        .HasColumnName("sort")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("Stock")
                        .HasColumnName("stock")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("StopTime")
                        .HasColumnName("stop_time")
                        .HasColumnType("int(11) unsigned");

                    b.Property<int?>("TempId")
                        .HasColumnName("temp_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnName("unit_name")
                        .HasColumnType("varchar(32)");

                    b.Property<decimal?>("Volume")
                        .HasColumnName("volume")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal?>("Weight")
                        .HasColumnName("weight")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("Id");

                    b.ToTable("abp_store_combination");
                });

            modelBuilder.Entity("AbpShop.AbpStoreCoupon", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(11) unsigned");

                    b.Property<int>("CategoryId")
                        .HasColumnName("category_id")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("CouponPrice")
                        .HasColumnName("coupon_price")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<uint>("CouponTime")
                        .HasColumnName("coupon_time")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("Integral")
                        .HasColumnName("integral")
                        .HasColumnType("int(11) unsigned");

                    b.Property<byte>("IsDel")
                        .HasColumnName("is_del")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnName("product_id")
                        .HasColumnType("varchar(64)");

                    b.Property<uint>("Sort")
                        .HasColumnName("sort")
                        .HasColumnType("int(11) unsigned");

                    b.Property<byte>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(64)");

                    b.Property<sbyte>("Type")
                        .HasColumnName("type")
                        .HasColumnType("tinyint(2)");

                    b.Property<decimal>("UseMinPrice")
                        .HasColumnName("use_min_price")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.HasKey("Id");

                    b.ToTable("abp_store_coupon");
                });

            modelBuilder.Entity("AbpShop.AbpStoreCouponIssue", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<int?>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(10)");

                    b.Property<int>("CategoryId")
                        .HasColumnName("category_id")
                        .HasColumnType("int(11)");

                    b.Property<int?>("Cid")
                        .HasColumnName("cid")
                        .HasColumnType("int(10)");

                    b.Property<decimal>("CouponPrice")
                        .HasColumnName("coupon_price")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<uint>("CouponTime")
                        .HasColumnName("coupon_time")
                        .HasColumnType("int(11) unsigned");

                    b.Property<string>("CouponTitle")
                        .HasColumnName("coupon_title")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("EndTime")
                        .HasColumnName("end_time")
                        .HasColumnType("int(10)");

                    b.Property<decimal>("FullReduction")
                        .HasColumnName("full_reduction")
                        .HasColumnType("decimal(8,2)");

                    b.Property<uint>("Integral")
                        .HasColumnName("integral")
                        .HasColumnType("int(11) unsigned");

                    b.Property<byte>("IsDel")
                        .HasColumnName("is_del")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<bool>("IsFullGive")
                        .HasColumnName("is_full_give")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsGiveSubscribe")
                        .HasColumnName("is_give_subscribe")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPermanent")
                        .HasColumnName("is_permanent")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnName("product_id")
                        .HasColumnType("varchar(64)");

                    b.Property<int?>("RemainCount")
                        .HasColumnName("remain_count")
                        .HasColumnType("int(10)");

                    b.Property<int?>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("int(10)");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(64)");

                    b.Property<int?>("TotalCount")
                        .HasColumnName("total_count")
                        .HasColumnType("int(10)");

                    b.Property<sbyte>("Type")
                        .HasColumnName("type")
                        .HasColumnType("tinyint(2)");

                    b.Property<decimal>("UseMinPrice")
                        .HasColumnName("use_min_price")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.HasKey("Id");

                    b.ToTable("abp_store_coupon_issue");
                });

            modelBuilder.Entity("AbpShop.AbpStoreCouponIssueUser", b =>
                {
                    b.Property<int?>("Uid")
                        .HasColumnName("uid")
                        .HasColumnType("int(10)");

                    b.Property<int?>("IssueCouponId")
                        .HasColumnName("issue_coupon_id")
                        .HasColumnType("int(10)");

                    b.Property<int?>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(10)");

                    b.HasKey("Uid", "IssueCouponId");

                    b.ToTable("abp_store_coupon_issue_user");
                });

            modelBuilder.Entity("AbpShop.AbpStoreCouponProduct", b =>
                {
                    b.Property<int>("CouponId")
                        .HasColumnName("coupon_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int(11)");

                    b.HasKey("CouponId", "ProductId");

                    b.ToTable("abp_store_coupon_product");
                });

            modelBuilder.Entity("AbpShop.AbpStoreCouponUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<uint>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("Cid")
                        .HasColumnName("cid")
                        .HasColumnType("int(11) unsigned");

                    b.Property<decimal>("CouponPrice")
                        .HasColumnName("coupon_price")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<string>("CouponTitle")
                        .IsRequired()
                        .HasColumnName("coupon_title")
                        .HasColumnType("varchar(32)");

                    b.Property<uint>("EndTime")
                        .HasColumnName("end_time")
                        .HasColumnType("int(11) unsigned");

                    b.Property<byte>("IsFail")
                        .HasColumnName("is_fail")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("varchar(32)");

                    b.Property<uint>("Uid")
                        .HasColumnName("uid")
                        .HasColumnType("int(11) unsigned");

                    b.Property<decimal>("UseMinPrice")
                        .HasColumnName("use_min_price")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<uint>("UseTime")
                        .HasColumnName("use_time")
                        .HasColumnType("int(11) unsigned");

                    b.HasKey("Id");

                    b.ToTable("abp_store_coupon_user");
                });

            modelBuilder.Entity("AbpShop.AbpStoreOrder", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(11) unsigned");

                    b.Property<decimal?>("BackIntegral")
                        .HasColumnName("back_integral")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<uint?>("BargainId")
                        .HasColumnName("bargain_id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<string>("CartId")
                        .IsRequired()
                        .HasColumnName("cart_id")
                        .HasColumnType("text");

                    b.Property<int>("ClerkId")
                        .HasColumnName("clerk_id")
                        .HasColumnType("int(11)");

                    b.Property<uint?>("CombinationId")
                        .HasColumnName("combination_id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<decimal>("Cost")
                        .HasColumnName("cost")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<uint>("CouponId")
                        .HasColumnName("coupon_id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<decimal>("CouponPrice")
                        .HasColumnName("coupon_price")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<decimal>("DeductionPrice")
                        .HasColumnName("deduction_price")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<string>("DeliveryId")
                        .HasColumnName("delivery_id")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("DeliveryName")
                        .HasColumnName("delivery_name")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("DeliveryType")
                        .HasColumnName("delivery_type")
                        .HasColumnType("varchar(32)");

                    b.Property<decimal>("FreightPrice")
                        .HasColumnName("freight_price")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("GainIntegral")
                        .HasColumnName("gain_integral")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<byte?>("IsChannel")
                        .HasColumnName("is_channel")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<byte>("IsDel")
                        .HasColumnName("is_del")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<byte>("IsMerCheck")
                        .HasColumnName("is_mer_check")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte?>("IsRemind")
                        .HasColumnName("is_remind")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<bool?>("IsSystemDel")
                        .HasColumnName("is_system_del")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Mark")
                        .IsRequired()
                        .HasColumnName("mark")
                        .HasColumnType("varchar(512)");

                    b.Property<uint>("MerId")
                        .HasColumnName("mer_id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnName("order_id")
                        .HasColumnType("varchar(32)");

                    b.Property<byte>("Paid")
                        .HasColumnName("paid")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<decimal>("PayPostage")
                        .HasColumnName("pay_postage")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<decimal>("PayPrice")
                        .HasColumnName("pay_price")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<uint?>("PayTime")
                        .HasColumnName("pay_time")
                        .HasColumnType("int(11) unsigned");

                    b.Property<string>("PayType")
                        .IsRequired()
                        .HasColumnName("pay_type")
                        .HasColumnType("varchar(32)");

                    b.Property<uint>("PinkId")
                        .HasColumnName("pink_id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<string>("RealName")
                        .IsRequired()
                        .HasColumnName("real_name")
                        .HasColumnType("varchar(32)");

                    b.Property<decimal>("RefundPrice")
                        .HasColumnName("refund_price")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<string>("RefundReason")
                        .HasColumnName("refund_reason")
                        .HasColumnType("varchar(255)");

                    b.Property<uint?>("RefundReasonTime")
                        .HasColumnName("refund_reason_time")
                        .HasColumnType("int(11) unsigned");

                    b.Property<string>("RefundReasonWap")
                        .HasColumnName("refund_reason_wap")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RefundReasonWapExplain")
                        .HasColumnName("refund_reason_wap_explain")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RefundReasonWapImg")
                        .HasColumnName("refund_reason_wap_img")
                        .HasColumnType("varchar(2000)");

                    b.Property<byte>("RefundStatus")
                        .HasColumnName("refund_status")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<string>("Remark")
                        .HasColumnName("remark")
                        .HasColumnType("varchar(512)");

                    b.Property<uint>("SeckillId")
                        .HasColumnName("seckill_id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<bool?>("ShippingType")
                        .IsRequired()
                        .HasColumnName("shipping_type")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("StoreId")
                        .HasColumnName("store_id")
                        .HasColumnType("int(11)");

                    b.Property<uint>("TotalNum")
                        .HasColumnName("total_num")
                        .HasColumnType("int(11) unsigned");

                    b.Property<decimal>("TotalPostage")
                        .HasColumnName("total_postage")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnName("total_price")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<uint>("Uid")
                        .HasColumnName("uid")
                        .HasColumnType("int(11) unsigned");

                    b.Property<string>("Unique")
                        .IsRequired()
                        .HasColumnName("unique")
                        .HasColumnType("char(32)");

                    b.Property<decimal>("UseIntegral")
                        .HasColumnName("use_integral")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<string>("UserAddress")
                        .IsRequired()
                        .HasColumnName("user_address")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserPhone")
                        .IsRequired()
                        .HasColumnName("user_phone")
                        .HasColumnType("varchar(18)");

                    b.Property<string>("VerifyCode")
                        .IsRequired()
                        .HasColumnName("verify_code")
                        .HasColumnType("varchar(12)");

                    b.HasKey("Id");

                    b.ToTable("abp_store_order");
                });

            modelBuilder.Entity("AbpShop.AbpStoreOrderCartInfo", b =>
                {
                    b.Property<uint>("Oid")
                        .HasColumnName("oid")
                        .HasColumnType("int(11) unsigned");

                    b.Property<string>("CartId")
                        .HasColumnName("cart_id")
                        .HasColumnType("varchar(50)");

                    b.Property<uint>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("CartInfo")
                        .IsRequired()
                        .HasColumnName("cart_info")
                        .HasColumnType("text");

                    b.Property<string>("Unique")
                        .IsRequired()
                        .HasColumnName("unique")
                        .HasColumnType("char(32)");

                    b.HasKey("Oid", "CartId", "ProductId");

                    b.ToTable("abp_store_order_cart_info");
                });

            modelBuilder.Entity("AbpShop.AbpStoreOrderStatus", b =>
                {
                    b.Property<uint>("Oid")
                        .HasColumnName("oid")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("ChangeType")
                        .HasColumnName("change_type")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("ChangeMessage")
                        .IsRequired()
                        .HasColumnName("change_message")
                        .HasColumnType("varchar(256)");

                    b.Property<uint>("ChangeTime")
                        .HasColumnName("change_time")
                        .HasColumnType("int(10) unsigned");

                    b.HasKey("Oid", "ChangeType");

                    b.ToTable("abp_store_order_status");
                });

            modelBuilder.Entity("AbpShop.AbpStorePink", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("AddTime")
                        .IsRequired()
                        .HasColumnName("add_time")
                        .HasColumnType("varchar(24)");

                    b.Property<uint>("Cid")
                        .HasColumnName("cid")
                        .HasColumnType("int(10) unsigned");

                    b.Property<byte>("IsRefund")
                        .HasColumnName("is_refund")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<byte>("IsTpl")
                        .HasColumnName("is_tpl")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<uint>("KId")
                        .HasColumnName("k_id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnName("order_id")
                        .HasColumnType("varchar(32)");

                    b.Property<uint>("OrderIdKey")
                        .HasColumnName("order_id_key")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("People")
                        .HasColumnName("people")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("Pid")
                        .HasColumnName("pid")
                        .HasColumnType("int(10) unsigned");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("decimal(10,2) unsigned");

                    b.Property<byte>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<string>("StopTime")
                        .IsRequired()
                        .HasColumnName("stop_time")
                        .HasColumnType("varchar(24)");

                    b.Property<uint>("TotalNum")
                        .HasColumnName("total_num")
                        .HasColumnType("int(10) unsigned");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnName("total_price")
                        .HasColumnType("decimal(10,2) unsigned");

                    b.Property<uint>("Uid")
                        .HasColumnName("uid")
                        .HasColumnType("int(10) unsigned");

                    b.HasKey("Id");

                    b.ToTable("abp_store_pink");
                });

            modelBuilder.Entity("AbpShop.AbpStoreProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("mediumint(11)");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasColumnName("activity")
                        .HasColumnType("varchar(255)");

                    b.Property<uint>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(11) unsigned");

                    b.Property<string>("BarCode")
                        .IsRequired()
                        .HasColumnName("bar_code")
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("Browse")
                        .HasColumnName("browse")
                        .HasColumnType("int(11)");

                    b.Property<string>("CateId")
                        .IsRequired()
                        .HasColumnName("cate_id")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("CodePath")
                        .IsRequired()
                        .HasColumnName("code_path")
                        .HasColumnType("varchar(64)");

                    b.Property<decimal>("Cost")
                        .HasColumnName("cost")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<int?>("Ficti")
                        .HasColumnName("ficti")
                        .HasColumnType("mediumint(11)");

                    b.Property<decimal>("GiveIntegral")
                        .HasColumnName("give_integral")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnName("image")
                        .HasColumnType("varchar(256)");

                    b.Property<byte?>("IsBargain")
                        .HasColumnName("is_bargain")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<bool>("IsBenefit")
                        .HasColumnName("is_benefit")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBest")
                        .HasColumnName("is_best")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte>("IsDel")
                        .HasColumnName("is_del")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<bool>("IsGood")
                        .HasColumnName("is_good")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsHot")
                        .HasColumnName("is_hot")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsNew")
                        .HasColumnName("is_new")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte>("IsPostage")
                        .HasColumnName("is_postage")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<byte>("IsSeckill")
                        .HasColumnName("is_seckill")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<bool?>("IsShow")
                        .IsRequired()
                        .HasColumnName("is_show")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSub")
                        .HasColumnName("is_sub")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .HasColumnName("keyword")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("LabelId")
                        .IsRequired()
                        .HasColumnName("label_id")
                        .HasColumnType("varchar(64)");

                    b.Property<uint>("MerId")
                        .HasColumnName("mer_id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<byte>("MerUse")
                        .HasColumnName("mer_use")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<decimal>("OtPrice")
                        .HasColumnName("ot_price")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<decimal>("Postage")
                        .HasColumnName("postage")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<uint>("Sales")
                        .HasColumnName("sales")
                        .HasColumnType("mediumint(11) unsigned");

                    b.Property<string>("SliderImage")
                        .IsRequired()
                        .HasColumnName("slider_image")
                        .HasColumnType("varchar(2000)");

                    b.Property<short>("Sort")
                        .HasColumnName("sort")
                        .HasColumnType("smallint(11)");

                    b.Property<string>("SoureLink")
                        .HasColumnName("soure_link")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("SpecType")
                        .HasColumnName("spec_type")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Spu")
                        .IsRequired()
                        .HasColumnName("spu")
                        .HasColumnType("char(13)");

                    b.Property<uint>("Stock")
                        .HasColumnName("stock")
                        .HasColumnType("mediumint(11) unsigned");

                    b.Property<string>("StoreInfo")
                        .IsRequired()
                        .HasColumnName("store_info")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnName("store_name")
                        .HasColumnType("varchar(128)");

                    b.Property<int>("TempId")
                        .HasColumnName("temp_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnName("unit_name")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("VideoLink")
                        .IsRequired()
                        .HasColumnName("video_link")
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("VipPrice")
                        .HasColumnName("vip_price")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.HasKey("Id");

                    b.ToTable("abp_store_product");
                });

            modelBuilder.Entity("AbpShop.AbpStoreProductAttr", b =>
                {
                    b.Property<uint>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("AttrName")
                        .HasColumnName("attr_name")
                        .HasColumnType("varchar(32)");

                    b.Property<bool?>("Type")
                        .HasColumnName("type")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("AttrValues")
                        .IsRequired()
                        .HasColumnName("attr_values")
                        .HasColumnType("varchar(256)");

                    b.HasKey("ProductId", "AttrName", "Type");

                    b.ToTable("abp_store_product_attr");
                });

            modelBuilder.Entity("AbpShop.AbpStoreProductAttrResult", b =>
                {
                    b.Property<uint>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<bool?>("Type")
                        .HasColumnName("type")
                        .HasColumnType("tinyint(1)");

                    b.Property<uint>("ChangeTime")
                        .HasColumnName("change_time")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnName("result")
                        .HasColumnType("text");

                    b.HasKey("ProductId", "Type");

                    b.ToTable("abp_store_product_attr_result");
                });

            modelBuilder.Entity("AbpShop.AbpStoreProductAttrValue", b =>
                {
                    b.Property<string>("BarCode")
                        .IsRequired()
                        .HasColumnName("bar_code")
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Brokerage")
                        .HasColumnName("brokerage")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("BrokerageTwo")
                        .HasColumnName("brokerage_two")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("Cost")
                        .HasColumnName("cost")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<string>("Image")
                        .HasColumnName("image")
                        .HasColumnType("varchar(128)");

                    b.Property<decimal>("OtPrice")
                        .HasColumnName("ot_price")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<uint>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<int?>("Quota")
                        .HasColumnName("quota")
                        .HasColumnType("int(11)");

                    b.Property<int?>("QuotaShow")
                        .HasColumnName("quota_show")
                        .HasColumnType("int(11)");

                    b.Property<uint>("Sales")
                        .HasColumnName("sales")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("Stock")
                        .HasColumnName("stock")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Suk")
                        .IsRequired()
                        .HasColumnName("suk")
                        .HasColumnType("varchar(128)");

                    b.Property<bool?>("Type")
                        .HasColumnName("type")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Unique")
                        .IsRequired()
                        .HasColumnName("unique")
                        .HasColumnType("char(8)");

                    b.Property<decimal>("Volume")
                        .HasColumnName("volume")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("Weight")
                        .HasColumnName("weight")
                        .HasColumnType("decimal(8,2)");

                    b.ToTable("abp_store_product_attr_value");
                });

            modelBuilder.Entity("AbpShop.AbpStoreProductCate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(11)");

                    b.Property<int>("CateId")
                        .HasColumnName("cate_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("abp_store_product_cate");
                });

            modelBuilder.Entity("AbpShop.AbpStoreProductCoupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10)");

                    b.Property<int>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(10)");

                    b.Property<int>("IssueCouponId")
                        .HasColumnName("issue_coupon_id")
                        .HasColumnType("int(10)");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int(10)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("abp_store_product_coupon");
                });

            modelBuilder.Entity("AbpShop.AbpStoreProductDescription", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int(11)");

                    b.Property<bool>("Type")
                        .HasColumnName("type")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.HasKey("ProductId", "Type");

                    b.ToTable("abp_store_product_description");
                });

            modelBuilder.Entity("AbpShop.AbpStoreProductRelation", b =>
                {
                    b.Property<uint>("Uid")
                        .HasColumnName("uid")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Category")
                        .HasColumnName("category")
                        .HasColumnType("varchar(32)");

                    b.Property<uint>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(10) unsigned");

                    b.HasKey("Uid", "ProductId", "Type", "Category");

                    b.ToTable("abp_store_product_relation");
                });

            modelBuilder.Entity("AbpShop.AbpStoreProductReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(11)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnName("avatar")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasColumnType("varchar(512)");

                    b.Property<byte>("IsDel")
                        .HasColumnName("is_del")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<bool>("IsReply")
                        .HasColumnName("is_reply")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MerchantReplyContent")
                        .HasColumnName("merchant_reply_content")
                        .HasColumnType("varchar(300)");

                    b.Property<int?>("MerchantReplyTime")
                        .HasColumnName("merchant_reply_time")
                        .HasColumnType("int(11)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnName("nickname")
                        .HasColumnType("varchar(64)");

                    b.Property<int>("Oid")
                        .HasColumnName("oid")
                        .HasColumnType("int(11)");

                    b.Property<string>("Pics")
                        .IsRequired()
                        .HasColumnName("pics")
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int(11)");

                    b.Property<bool>("ProductScore")
                        .HasColumnName("product_score")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ReplyType")
                        .IsRequired()
                        .HasColumnName("reply_type")
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("ServiceScore")
                        .HasColumnName("service_score")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Uid")
                        .HasColumnName("uid")
                        .HasColumnType("int(11)");

                    b.Property<string>("Unique")
                        .IsRequired()
                        .HasColumnName("unique")
                        .HasColumnType("char(32)");

                    b.HasKey("Id");

                    b.ToTable("abp_store_product_reply");
                });

            modelBuilder.Entity("AbpShop.AbpStoreProductRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10)");

                    b.Property<string>("RuleName")
                        .IsRequired()
                        .HasColumnName("rule_name")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("RuleValue")
                        .IsRequired()
                        .HasColumnName("rule_value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("abp_store_product_rule");
                });

            modelBuilder.Entity("AbpShop.AbpStoreSeckill", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("AddTime")
                        .IsRequired()
                        .HasColumnName("add_time")
                        .HasColumnType("varchar(128)");

                    b.Property<decimal>("Cost")
                        .HasColumnName("cost")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<decimal>("GiveIntegral")
                        .HasColumnName("give_integral")
                        .HasColumnType("decimal(10,2) unsigned");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnName("image")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnName("images")
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnName("info")
                        .HasColumnType("varchar(255)");

                    b.Property<byte>("IsDel")
                        .HasColumnName("is_del")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<byte>("IsHot")
                        .HasColumnName("is_hot")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<byte>("IsPostage")
                        .HasColumnName("is_postage")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<byte>("IsShow")
                        .HasColumnName("is_show")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<uint>("Num")
                        .HasColumnName("num")
                        .HasColumnType("int(11) unsigned");

                    b.Property<decimal>("OtPrice")
                        .HasColumnName("ot_price")
                        .HasColumnType("decimal(10,2) unsigned");

                    b.Property<decimal>("Postage")
                        .HasColumnName("postage")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("decimal(10,2) unsigned");

                    b.Property<uint>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<int>("Quota")
                        .HasColumnName("quota")
                        .HasColumnType("int(10)");

                    b.Property<int>("QuotaShow")
                        .HasColumnName("quota_show")
                        .HasColumnType("int(10)");

                    b.Property<uint>("Sales")
                        .HasColumnName("sales")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("Sort")
                        .HasColumnName("sort")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnName("start_time")
                        .HasColumnType("varchar(128)");

                    b.Property<byte>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<uint>("Stock")
                        .HasColumnName("stock")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("StopTime")
                        .IsRequired()
                        .HasColumnName("stop_time")
                        .HasColumnType("varchar(128)");

                    b.Property<int?>("TempId")
                        .HasColumnName("temp_id")
                        .HasColumnType("int(11)");

                    b.Property<int?>("TimeId")
                        .HasColumnName("time_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnName("unit_name")
                        .HasColumnType("varchar(16)");

                    b.Property<decimal?>("Volume")
                        .HasColumnName("volume")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal?>("Weight")
                        .HasColumnName("weight")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("Id");

                    b.ToTable("abp_store_seckill");
                });

            modelBuilder.Entity("AbpShop.AbpStoreSeckillTime", b =>
                {
                    b.Property<int>("SeckillId")
                        .HasColumnName("seckill_id")
                        .HasColumnType("int(10)");

                    b.Property<int>("TimeId")
                        .HasColumnName("time_id")
                        .HasColumnType("int(10)");

                    b.ToTable("abp_store_seckill_time");
                });

            modelBuilder.Entity("AbpShop.AbpStoreService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(11)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnName("avatar")
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("Customer")
                        .HasColumnName("customer")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MerId")
                        .HasColumnName("mer_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnName("nickname")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Notify")
                        .HasColumnName("notify")
                        .HasColumnType("int(2)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasColumnType("varchar(20)");

                    b.Property<byte>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<int>("Uid")
                        .HasColumnName("uid")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("abp_store_service");
                });

            modelBuilder.Entity("AbpShop.AbpStoreServiceLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(11)");

                    b.Property<int>("MerId")
                        .HasColumnName("mer_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Msn")
                        .IsRequired()
                        .HasColumnName("msn")
                        .HasColumnType("text");

                    b.Property<byte>("MsnType")
                        .HasColumnName("msn_type")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<bool>("Remind")
                        .HasColumnName("remind")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ToUid")
                        .HasColumnName("to_uid")
                        .HasColumnType("int(11)");

                    b.Property<bool>("Type")
                        .HasColumnName("type")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Uid")
                        .HasColumnName("uid")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("abp_store_service_log");
                });

            modelBuilder.Entity("AbpShop.AbpStoreVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10)");

                    b.Property<int?>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(11)");

                    b.Property<int?>("CateId")
                        .HasColumnName("cate_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Content")
                        .HasColumnName("content")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("Count")
                        .HasColumnName("count")
                        .HasColumnType("int(11)");

                    b.Property<int?>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("ProductType")
                        .HasColumnName("product_type")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasColumnType("char(50)");

                    b.Property<int?>("Uid")
                        .HasColumnName("uid")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("abp_store_visit");
                });

            modelBuilder.Entity("AbpShop.AbpSystemAdmin", b =>
                {
                    b.Property<ushort>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnName("account")
                        .HasColumnType("varchar(32)");

                    b.Property<uint>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("HeadPic")
                        .IsRequired()
                        .HasColumnName("head_pic")
                        .HasColumnType("varchar(255)");

                    b.Property<byte>("IsDel")
                        .HasColumnName("is_del")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<string>("LastIp")
                        .HasColumnName("last_ip")
                        .HasColumnType("varchar(16)");

                    b.Property<uint?>("LastTime")
                        .HasColumnName("last_time")
                        .HasColumnType("int(10) unsigned");

                    b.Property<byte>("Level")
                        .HasColumnName("level")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<uint>("LoginCount")
                        .HasColumnName("login_count")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Pwd")
                        .IsRequired()
                        .HasColumnName("pwd")
                        .HasColumnType("char(100)");

                    b.Property<string>("RealName")
                        .IsRequired()
                        .HasColumnName("real_name")
                        .HasColumnType("varchar(16)");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnName("roles")
                        .HasColumnType("varchar(128)");

                    b.Property<byte>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1) unsigned");

                    b.HasKey("Id");

                    b.ToTable("abp_system_admin");
                });

            modelBuilder.Entity("AbpShop.AbpSystemAttachment", b =>
                {
                    b.Property<int>("AttId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("att_id")
                        .HasColumnType("int(10)");

                    b.Property<string>("AttDir")
                        .IsRequired()
                        .HasColumnName("att_dir")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("AttSize")
                        .IsRequired()
                        .HasColumnName("att_size")
                        .HasColumnType("char(30)");

                    b.Property<string>("AttType")
                        .IsRequired()
                        .HasColumnName("att_type")
                        .HasColumnType("char(30)");

                    b.Property<byte>("ImageType")
                        .HasColumnName("image_type")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<byte>("ModuleType")
                        .HasColumnName("module_type")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Pid")
                        .HasColumnName("pid")
                        .HasColumnType("int(10)");

                    b.Property<string>("SattDir")
                        .HasColumnName("satt_dir")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Time")
                        .HasColumnName("time")
                        .HasColumnType("int(11)");

                    b.HasKey("AttId");

                    b.ToTable("abp_system_attachment");
                });

            modelBuilder.Entity("AbpShop.AbpSystemAttachmentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Enname")
                        .HasColumnName("enname")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Pid")
                        .HasColumnName("pid")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("abp_system_attachment_category");
                });

            modelBuilder.Entity("AbpShop.AbpSystemCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("AreaCode")
                        .IsRequired()
                        .HasColumnName("area_code")
                        .HasColumnType("varchar(30)");

                    b.Property<int>("CityId")
                        .HasColumnName("city_id")
                        .HasColumnType("int(11)");

                    b.Property<bool?>("IsShow")
                        .IsRequired()
                        .HasColumnName("is_show")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Lat")
                        .IsRequired()
                        .HasColumnName("lat")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Level")
                        .HasColumnName("level")
                        .HasColumnType("int(11)");

                    b.Property<string>("Lng")
                        .IsRequired()
                        .HasColumnName("lng")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MergerName")
                        .IsRequired()
                        .HasColumnName("merger_name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("abp_system_city");
                });

            modelBuilder.Entity("AbpShop.AbpSystemConfig", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("ConfigTabId")
                        .HasColumnName("config_tab_id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Desc")
                        .HasColumnName("desc")
                        .HasColumnType("varchar(255)");

                    b.Property<uint?>("High")
                        .HasColumnName("high")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnName("info")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("InputType")
                        .HasColumnName("input_type")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasColumnName("menu_name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Parameter")
                        .HasColumnName("parameter")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Required")
                        .HasColumnName("required")
                        .HasColumnType("varchar(255)");

                    b.Property<uint>("Sort")
                        .HasColumnName("sort")
                        .HasColumnType("int(10) unsigned");

                    b.Property<byte>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("varchar(255)");

                    b.Property<byte?>("UploadType")
                        .HasColumnName("upload_type")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("varchar(5000)");

                    b.Property<uint?>("Width")
                        .HasColumnName("width")
                        .HasColumnType("int(10) unsigned");

                    b.HasKey("Id");

                    b.ToTable("abp_system_config");
                });

            modelBuilder.Entity("AbpShop.AbpSystemConfigTab", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("EngTitle")
                        .IsRequired()
                        .HasColumnName("eng_title")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Icon")
                        .HasColumnName("icon")
                        .HasColumnType("varchar(30)");

                    b.Property<byte>("Info")
                        .HasColumnName("info")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<int>("Pid")
                        .HasColumnName("pid")
                        .HasColumnType("int(11)");

                    b.Property<int>("Sort")
                        .HasColumnName("sort")
                        .HasColumnType("int(11)");

                    b.Property<byte>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("Type")
                        .HasColumnName("type")
                        .HasColumnType("int(2)");

                    b.HasKey("Id");

                    b.ToTable("abp_system_config_tab");
                });

            modelBuilder.Entity("AbpShop.AbpSystemFile", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Atime")
                        .IsRequired()
                        .HasColumnName("atime")
                        .HasColumnType("char(12)");

                    b.Property<string>("Cthash")
                        .IsRequired()
                        .HasColumnName("cthash")
                        .HasColumnType("char(32)");

                    b.Property<string>("Ctime")
                        .IsRequired()
                        .HasColumnName("ctime")
                        .HasColumnType("char(12)");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnName("filename")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Mtime")
                        .IsRequired()
                        .HasColumnName("mtime")
                        .HasColumnType("char(12)");

                    b.HasKey("Id");

                    b.ToTable("abp_system_file");
                });

            modelBuilder.Entity("AbpShop.AbpSystemGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("ConfigName")
                        .IsRequired()
                        .HasColumnName("config_name")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Fields")
                        .HasColumnName("fields")
                        .HasColumnType("text");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnName("info")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("abp_system_group");
                });

            modelBuilder.Entity("AbpShop.AbpSystemGroupData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(10)");

                    b.Property<int>("Gid")
                        .HasColumnName("gid")
                        .HasColumnType("int(11)");

                    b.Property<int>("Sort")
                        .HasColumnName("sort")
                        .HasColumnType("int(11)");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("abp_system_group_data");
                });

            modelBuilder.Entity("AbpShop.AbpSystemLog", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("AdminId")
                        .HasColumnName("admin_id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("AdminName")
                        .IsRequired()
                        .HasColumnName("admin_name")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnName("ip")
                        .HasColumnType("varchar(16)");

                    b.Property<uint>("MerchantId")
                        .HasColumnName("merchant_id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnName("method")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Page")
                        .IsRequired()
                        .HasColumnName("page")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnName("path")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("varchar(32)");

                    b.HasKey("Id");

                    b.ToTable("abp_system_log");
                });

            modelBuilder.Entity("AbpShop.AbpSystemMenus", b =>
                {
                    b.Property<ushort>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<byte>("Access")
                        .HasColumnName("access")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnName("action")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("ApiUrl")
                        .IsRequired()
                        .HasColumnName("api_url")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("AuthType")
                        .HasColumnName("auth_type")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnName("controller")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnName("header")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnName("icon")
                        .HasColumnType("varchar(16)");

                    b.Property<bool>("IsDel")
                        .HasColumnName("is_del")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsHeader")
                        .HasColumnName("is_header")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte>("IsShow")
                        .HasColumnName("is_show")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<bool>("IsShowPath")
                        .HasColumnName("is_show_path")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasColumnName("menu_name")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("MenuPath")
                        .IsRequired()
                        .HasColumnName("menu_path")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Methods")
                        .IsRequired()
                        .HasColumnName("methods")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasColumnName("module")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Params")
                        .IsRequired()
                        .HasColumnName("params")
                        .HasColumnType("varchar(128)");

                    b.Property<ushort>("Pid")
                        .HasColumnName("pid")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<sbyte>("Sort")
                        .HasColumnName("sort")
                        .HasColumnType("tinyint(3)");

                    b.Property<string>("UniqueAuth")
                        .IsRequired()
                        .HasColumnName("unique_auth")
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("abp_system_menus");
                });

            modelBuilder.Entity("AbpShop.AbpSystemNotice", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnName("icon")
                        .HasColumnType("varchar(16)");

                    b.Property<string>("PushAdmin")
                        .IsRequired()
                        .HasColumnName("push_admin")
                        .HasColumnType("varchar(128)");

                    b.Property<byte>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<string>("TableTitle")
                        .IsRequired()
                        .HasColumnName("table_title")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnName("template")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("url")
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("abp_system_notice");
                });

            modelBuilder.Entity("AbpShop.AbpSystemNoticeAdmin", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(10) unsigned");

                    b.Property<ushort>("AdminId")
                        .HasColumnName("admin_id")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<byte>("IsClick")
                        .HasColumnName("is_click")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("IsVisit")
                        .HasColumnName("is_visit")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<uint>("LinkId")
                        .HasColumnName("link_id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("NoticeType")
                        .IsRequired()
                        .HasColumnName("notice_type")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("TableData")
                        .IsRequired()
                        .HasColumnName("table_data")
                        .HasColumnType("text");

                    b.Property<int>("VisitTime")
                        .HasColumnName("visit_time")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("abp_system_notice_admin");
                });

            modelBuilder.Entity("AbpShop.AbpSystemRole", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<byte>("Level")
                        .HasColumnName("level")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnName("role_name")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Rules")
                        .IsRequired()
                        .HasColumnName("rules")
                        .HasColumnType("text");

                    b.Property<byte>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1) unsigned");

                    b.HasKey("Id");

                    b.ToTable("abp_system_role");
                });

            modelBuilder.Entity("AbpShop.AbpSystemStore", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<int>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(11)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("address")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DayTime")
                        .IsRequired()
                        .HasColumnName("day_time")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DetailedAddress")
                        .IsRequired()
                        .HasColumnName("detailed_address")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnName("image")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnName("introduction")
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("IsDel")
                        .HasColumnName("is_del")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsShow")
                        .HasColumnName("is_show")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnName("latitude")
                        .HasColumnType("char(25)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnName("longitude")
                        .HasColumnType("char(25)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasColumnType("char(25)");

                    b.Property<string>("ValidTime")
                        .IsRequired()
                        .HasColumnName("valid_time")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("abp_system_store");
                });

            modelBuilder.Entity("AbpShop.AbpSystemStoreStaff", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<int?>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(10)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnName("avatar")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("char(15)");

                    b.Property<string>("StaffName")
                        .HasColumnName("staff_name")
                        .HasColumnType("varchar(64)");

                    b.Property<sbyte?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(2)");

                    b.Property<int>("StoreId")
                        .HasColumnName("store_id")
                        .HasColumnType("int(11)");

                    b.Property<uint>("Uid")
                        .HasColumnName("uid")
                        .HasColumnType("int(10) unsigned");

                    b.Property<sbyte>("VerifyStatus")
                        .HasColumnName("verify_status")
                        .HasColumnType("tinyint(2)");

                    b.HasKey("Id");

                    b.ToTable("abp_system_store_staff");
                });

            modelBuilder.Entity("AbpShop.AbpSystemUserLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("Discount")
                        .HasColumnName("discount")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("ExpNum")
                        .HasColumnName("exp_num")
                        .HasColumnType("int(10)");

                    b.Property<string>("Explain")
                        .IsRequired()
                        .HasColumnName("explain")
                        .HasColumnType("text");

                    b.Property<int>("Grade")
                        .HasColumnName("grade")
                        .HasColumnType("int(11)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnName("icon")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnName("image")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsDel")
                        .HasColumnName("is_del")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsForever")
                        .HasColumnName("is_forever")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPay")
                        .HasColumnName("is_pay")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsShow")
                        .HasColumnName("is_show")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MerId")
                        .HasColumnName("mer_id")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("Money")
                        .HasColumnName("money")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ValidDate")
                        .HasColumnName("valid_date")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("abp_system_user_level");
                });

            modelBuilder.Entity("AbpShop.AbpSystemUserTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(11)");

                    b.Property<string>("Illustrate")
                        .IsRequired()
                        .HasColumnName("illustrate")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsMust")
                        .HasColumnName("is_must")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsShow")
                        .HasColumnName("is_show")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LevelId")
                        .HasColumnName("level_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Number")
                        .HasColumnName("number")
                        .HasColumnType("int(11)");

                    b.Property<string>("RealName")
                        .IsRequired()
                        .HasColumnName("real_name")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Sort")
                        .HasColumnName("sort")
                        .HasColumnType("int(11)");

                    b.Property<string>("TaskType")
                        .IsRequired()
                        .HasColumnName("task_type")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("abp_system_user_task");
                });

            modelBuilder.Entity("AbpShop.AbpTemplateMessage", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("AddTime")
                        .IsRequired()
                        .HasColumnName("add_time")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("content")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("char(100)");

                    b.Property<sbyte>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(4)");

                    b.Property<string>("Tempid")
                        .HasColumnName("tempid")
                        .HasColumnType("char(100)");

                    b.Property<string>("Tempkey")
                        .IsRequired()
                        .HasColumnName("tempkey")
                        .HasColumnType("char(50)");

                    b.Property<bool>("Type")
                        .HasColumnName("type")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("abp_template_message");
                });

            modelBuilder.Entity("AbpShop.AbpUser", b =>
                {
                    b.Property<uint>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("uid")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnName("account")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("AddIp")
                        .IsRequired()
                        .HasColumnName("add_ip")
                        .HasColumnType("varchar(16)");

                    b.Property<uint>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(11) unsigned");

                    b.Property<string>("Addres")
                        .IsRequired()
                        .HasColumnName("addres")
                        .HasColumnType("varchar(255)");

                    b.Property<uint?>("Adminid")
                        .HasColumnName("adminid")
                        .HasColumnType("int(11) unsigned");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnName("avatar")
                        .HasColumnType("varchar(256)");

                    b.Property<int>("Birthday")
                        .HasColumnName("birthday")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("BrokeragePrice")
                        .HasColumnName("brokerage_price")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("CardId")
                        .IsRequired()
                        .HasColumnName("card_id")
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("CleanTime")
                        .HasColumnName("clean_time")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("Exp")
                        .HasColumnName("exp")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<int>("GroupId")
                        .HasColumnName("group_id")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("Integral")
                        .HasColumnName("integral")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<byte>("IsPromoter")
                        .HasColumnName("is_promoter")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<string>("LastIp")
                        .IsRequired()
                        .HasColumnName("last_ip")
                        .HasColumnType("varchar(16)");

                    b.Property<uint>("LastTime")
                        .HasColumnName("last_time")
                        .HasColumnType("int(11) unsigned");

                    b.Property<byte>("Level")
                        .HasColumnName("level")
                        .HasColumnType("tinyint(2) unsigned");

                    b.Property<string>("LoginType")
                        .IsRequired()
                        .HasColumnName("login_type")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Mark")
                        .IsRequired()
                        .HasColumnName("mark")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnName("nickname")
                        .HasColumnType("varchar(60)");

                    b.Property<decimal>("NowMoney")
                        .HasColumnName("now_money")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<int>("PartnerId")
                        .HasColumnName("partner_id")
                        .HasColumnType("int(11)");

                    b.Property<uint?>("PayCount")
                        .HasColumnName("pay_count")
                        .HasColumnType("int(11) unsigned");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("char(15)");

                    b.Property<string>("Pwd")
                        .IsRequired()
                        .HasColumnName("pwd")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("RealName")
                        .IsRequired()
                        .HasColumnName("real_name")
                        .HasColumnType("varchar(25)");

                    b.Property<int>("SignNum")
                        .HasColumnName("sign_num")
                        .HasColumnType("int(11)");

                    b.Property<int?>("SpreadCount")
                        .HasColumnName("spread_count")
                        .HasColumnType("int(11)");

                    b.Property<uint>("SpreadTime")
                        .HasColumnName("spread_time")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("SpreadUid")
                        .HasColumnName("spread_uid")
                        .HasColumnType("int(10) unsigned");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnName("user_type")
                        .HasColumnType("varchar(32)");

                    b.HasKey("Uid");

                    b.ToTable("abp_user");
                });

            modelBuilder.Entity("AbpShop.AbpUserAddress", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<uint>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("city")
                        .HasColumnType("varchar(64)");

                    b.Property<int>("CityId")
                        .HasColumnName("city_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnName("detail")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnName("district")
                        .HasColumnType("varchar(64)");

                    b.Property<byte>("IsDefault")
                        .HasColumnName("is_default")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<byte>("IsDel")
                        .HasColumnName("is_del")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnName("latitude")
                        .HasColumnType("varchar(16)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnName("longitude")
                        .HasColumnType("varchar(16)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasColumnType("varchar(16)");

                    b.Property<uint>("PostCode")
                        .HasColumnName("post_code")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnName("province")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("RealName")
                        .IsRequired()
                        .HasColumnName("real_name")
                        .HasColumnType("varchar(32)");

                    b.Property<uint>("Uid")
                        .HasColumnName("uid")
                        .HasColumnType("int(10) unsigned");

                    b.HasKey("Id");

                    b.ToTable("abp_user_address");
                });

            modelBuilder.Entity("AbpShop.AbpUserBill", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(10) unsigned");

                    b.Property<decimal>("Balance")
                        .HasColumnName("balance")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnName("category")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("LinkId")
                        .IsRequired()
                        .HasColumnName("link_id")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Mark")
                        .IsRequired()
                        .HasColumnName("mark")
                        .HasColumnType("varchar(512)");

                    b.Property<decimal>("Number")
                        .HasColumnName("number")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<byte>("Pm")
                        .HasColumnName("pm")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Take")
                        .HasColumnName("take")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("varchar(64)");

                    b.Property<uint>("Uid")
                        .HasColumnName("uid")
                        .HasColumnType("int(10) unsigned");

                    b.HasKey("Id");

                    b.ToTable("abp_user_bill");
                });

            modelBuilder.Entity("AbpShop.AbpUserEnter", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("address")
                        .HasColumnType("varchar(256)");

                    b.Property<uint>("ApplyTime")
                        .HasColumnName("apply_time")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Charter")
                        .IsRequired()
                        .HasColumnName("charter")
                        .HasColumnType("varchar(512)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("city")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnName("district")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("FailMessage")
                        .IsRequired()
                        .HasColumnName("fail_message")
                        .HasColumnType("varchar(256)");

                    b.Property<uint>("FailTime")
                        .HasColumnName("fail_time")
                        .HasColumnType("int(10) unsigned");

                    b.Property<byte>("IsDel")
                        .HasColumnName("is_del")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<byte>("IsLock")
                        .HasColumnName("is_lock")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<string>("LinkTel")
                        .IsRequired()
                        .HasColumnName("link_tel")
                        .HasColumnType("varchar(16)");

                    b.Property<string>("LinkUser")
                        .IsRequired()
                        .HasColumnName("link_user")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("MerchantName")
                        .IsRequired()
                        .HasColumnName("merchant_name")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnName("province")
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SuccessTime")
                        .HasColumnName("success_time")
                        .HasColumnType("int(11)");

                    b.Property<uint>("Uid")
                        .HasColumnName("uid")
                        .HasColumnType("int(10) unsigned");

                    b.HasKey("Id");

                    b.ToTable("abp_user_enter");
                });

            modelBuilder.Entity("AbpShop.AbpUserExtract", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint?>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("AlipayCode")
                        .HasColumnName("alipay_code")
                        .HasColumnType("varchar(64)");

                    b.Property<decimal?>("Balance")
                        .HasColumnName("balance")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<string>("BankAddress")
                        .HasColumnName("bank_address")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("BankCode")
                        .HasColumnName("bank_code")
                        .HasColumnType("varchar(32)");

                    b.Property<decimal?>("ExtractPrice")
                        .HasColumnName("extract_price")
                        .HasColumnType("decimal(8,2) unsigned");

                    b.Property<string>("ExtractType")
                        .HasColumnName("extract_type")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("FailMsg")
                        .HasColumnName("fail_msg")
                        .HasColumnType("varchar(128)");

                    b.Property<uint?>("FailTime")
                        .HasColumnName("fail_time")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Mark")
                        .HasColumnName("mark")
                        .HasColumnType("varchar(512)");

                    b.Property<string>("QrcodeUrl")
                        .IsRequired()
                        .HasColumnName("qrcode_url")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RealName")
                        .HasColumnName("real_name")
                        .HasColumnType("varchar(64)");

                    b.Property<sbyte?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(2)");

                    b.Property<uint?>("Uid")
                        .HasColumnName("uid")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Wechat")
                        .HasColumnName("wechat")
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.ToTable("abp_user_extract");
                });

            modelBuilder.Entity("AbpShop.AbpUserGroup", b =>
                {
                    b.Property<ushort>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<string>("GroupName")
                        .HasColumnName("group_name")
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("abp_user_group");
                });

            modelBuilder.Entity("AbpShop.AbpUserLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("LabelName")
                        .IsRequired()
                        .HasColumnName("label_name")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("abp_user_label");
                });

            modelBuilder.Entity("AbpShop.AbpUserLabelRelation", b =>
                {
                    b.Property<int>("Uid")
                        .HasColumnName("uid")
                        .HasColumnType("int(11)");

                    b.Property<int>("LabelId")
                        .HasColumnName("label_id")
                        .HasColumnType("int(11)");

                    b.HasKey("Uid", "LabelId");

                    b.ToTable("abp_user_label_relation");
                });

            modelBuilder.Entity("AbpShop.AbpUserLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(11)");

                    b.Property<int>("Discount")
                        .HasColumnName("discount")
                        .HasColumnType("int(11)");

                    b.Property<int>("Grade")
                        .HasColumnName("grade")
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsDel")
                        .HasColumnName("is_del")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsForever")
                        .HasColumnName("is_forever")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LevelId")
                        .HasColumnName("level_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Mark")
                        .IsRequired()
                        .HasColumnName("mark")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("MerId")
                        .HasColumnName("mer_id")
                        .HasColumnType("int(11)");

                    b.Property<bool>("Remind")
                        .HasColumnName("remind")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Uid")
                        .HasColumnName("uid")
                        .HasColumnType("int(11)");

                    b.Property<int>("ValidTime")
                        .HasColumnName("valid_time")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("abp_user_level");
                });

            modelBuilder.Entity("AbpShop.AbpUserNotice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(11)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("content")
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsSend")
                        .HasColumnName("is_send")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SendTime")
                        .HasColumnName("send_time")
                        .HasColumnType("int(11)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(20)");

                    b.Property<bool?>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnName("uid")
                        .HasColumnType("text");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnName("user")
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("abp_user_notice");
                });

            modelBuilder.Entity("AbpShop.AbpUserNoticeSee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(11)");

                    b.Property<int>("Nid")
                        .HasColumnName("nid")
                        .HasColumnType("int(11)");

                    b.Property<int>("Uid")
                        .HasColumnName("uid")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("abp_user_notice_see");
                });

            modelBuilder.Entity("AbpShop.AbpUserRecharge", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<int?>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(12)");

                    b.Property<decimal>("GivePrice")
                        .HasColumnName("give_price")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("OrderId")
                        .HasColumnName("order_id")
                        .HasColumnType("varchar(32)");

                    b.Property<bool?>("Paid")
                        .HasColumnName("paid")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("PayTime")
                        .HasColumnName("pay_time")
                        .HasColumnType("int(10)");

                    b.Property<decimal?>("Price")
                        .HasColumnName("price")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("RechargeType")
                        .HasColumnName("recharge_type")
                        .HasColumnType("varchar(32)");

                    b.Property<decimal?>("RefundPrice")
                        .HasColumnName("refund_price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("Uid")
                        .HasColumnName("uid")
                        .HasColumnType("int(10)");

                    b.HasKey("Id");

                    b.ToTable("abp_user_recharge");
                });

            modelBuilder.Entity("AbpShop.AbpUserSign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(11)");

                    b.Property<int>("Balance")
                        .HasColumnName("balance")
                        .HasColumnType("int(11)");

                    b.Property<int>("Number")
                        .HasColumnName("number")
                        .HasColumnType("int(11)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Uid")
                        .HasColumnName("uid")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("abp_user_sign");
                });

            modelBuilder.Entity("AbpShop.AbpUserTaskFinish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(11)");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("TaskId")
                        .HasColumnName("task_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("Uid")
                        .HasColumnName("uid")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("abp_user_task_finish");
                });

            modelBuilder.Entity("AbpShop.AbpUserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExpiresTime")
                        .HasColumnName("expires_time")
                        .HasColumnType("datetime");

                    b.Property<string>("LoginIp")
                        .HasColumnName("login_ip")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnName("token")
                        .HasColumnType("varchar(500)");

                    b.Property<uint>("Uid")
                        .HasColumnName("uid")
                        .HasColumnType("int(10) unsigned");

                    b.HasKey("Id");

                    b.ToTable("abp_user_token");
                });

            modelBuilder.Entity("AbpShop.AbpUserVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(11)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnName("ip")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("StayTime")
                        .HasColumnName("stay_time")
                        .HasColumnType("int(11)");

                    b.Property<int>("Uid")
                        .HasColumnName("uid")
                        .HasColumnType("int(11)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("url")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("abp_user_visit");
                });

            modelBuilder.Entity("AbpShop.AbpWechatKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10)");

                    b.Property<string>("Keys")
                        .IsRequired()
                        .HasColumnName("keys")
                        .HasColumnType("varchar(64)");

                    b.Property<int>("ReplyId")
                        .HasColumnName("reply_id")
                        .HasColumnType("int(10)");

                    b.HasKey("Id");

                    b.ToTable("abp_wechat_key");
                });

            modelBuilder.Entity("AbpShop.AbpWechatMedia", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("MediaId")
                        .IsRequired()
                        .HasColumnName("media_id")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnName("path")
                        .HasColumnType("varchar(128)");

                    b.Property<byte>("Temporary")
                        .HasColumnName("temporary")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("varchar(16)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("url")
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.ToTable("abp_wechat_media");
                });

            modelBuilder.Entity("AbpShop.AbpWechatMessage", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Openid")
                        .IsRequired()
                        .HasColumnName("openid")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnName("result")
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("varchar(32)");

                    b.HasKey("Id");

                    b.ToTable("abp_wechat_message");
                });

            modelBuilder.Entity("AbpShop.AbpWechatNewsCategory", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("AddTime")
                        .IsRequired()
                        .HasColumnName("add_time")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CateName")
                        .IsRequired()
                        .HasColumnName("cate_name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NewId")
                        .IsRequired()
                        .HasColumnName("new_id")
                        .HasColumnType("varchar(255)");

                    b.Property<uint>("Sort")
                        .HasColumnName("sort")
                        .HasColumnType("int(10) unsigned");

                    b.Property<byte>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1) unsigned");

                    b.HasKey("Id");

                    b.ToTable("abp_wechat_news_category");
                });

            modelBuilder.Entity("AbpShop.AbpWechatQrcode", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("AddTime")
                        .IsRequired()
                        .HasColumnName("add_time")
                        .HasColumnType("varchar(255)");

                    b.Property<uint>("ExpireSeconds")
                        .HasColumnName("expire_seconds")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("QrcodeUrl")
                        .IsRequired()
                        .HasColumnName("qrcode_url")
                        .HasColumnType("varchar(255)");

                    b.Property<uint>("Scan")
                        .HasColumnName("scan")
                        .HasColumnType("int(10) unsigned");

                    b.Property<byte>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<uint>("ThirdId")
                        .HasColumnName("third_id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<string>("ThirdType")
                        .IsRequired()
                        .HasColumnName("third_type")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Ticket")
                        .IsRequired()
                        .HasColumnName("ticket")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("url")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("abp_wechat_qrcode");
                });

            modelBuilder.Entity("AbpShop.AbpWechatReply", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnName("data")
                        .HasColumnType("text");

                    b.Property<byte>("Hide")
                        .HasColumnName("hide")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnName("key")
                        .HasColumnType("varchar(64)");

                    b.Property<byte>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("varchar(32)");

                    b.HasKey("Id");

                    b.ToTable("abp_wechat_reply");
                });

            modelBuilder.Entity("AbpShop.AbpWechatUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<uint?>("AddTime")
                        .HasColumnName("add_time")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("city")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnName("country")
                        .HasColumnType("varchar(64)");

                    b.Property<ushort?>("Groupid")
                        .HasColumnName("groupid")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<string>("Headimgurl")
                        .IsRequired()
                        .HasColumnName("headimgurl")
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("IsComplete")
                        .HasColumnName("is_complete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnName("language")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnName("nickname")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Openid")
                        .HasColumnName("openid")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnName("province")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Remark")
                        .HasColumnName("remark")
                        .HasColumnType("varchar(256)");

                    b.Property<byte>("Sex")
                        .HasColumnName("sex")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<byte?>("Subscribe")
                        .HasColumnName("subscribe")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<uint?>("SubscribeTime")
                        .HasColumnName("subscribe_time")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("TagidList")
                        .HasColumnName("tagid_list")
                        .HasColumnType("varchar(256)");

                    b.Property<uint>("Uid")
                        .HasColumnName("uid")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Unionid")
                        .HasColumnName("unionid")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("UserType")
                        .HasColumnName("user_type")
                        .HasColumnType("varchar(32)");

                    b.HasKey("Id");

                    b.ToTable("abp_wechat_user");
                });

            modelBuilder.Entity("AbpShop.Merchant.Community", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(10,6)");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(10,6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("AppCommunity");
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ApplicationName")
                        .HasColumnName("ApplicationName")
                        .HasColumnType("varchar(96) CHARACTER SET utf8mb4")
                        .HasMaxLength(96);

                    b.Property<string>("BrowserInfo")
                        .HasColumnName("BrowserInfo")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("ClientId")
                        .HasColumnName("ClientId")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("ClientIpAddress")
                        .HasColumnName("ClientIpAddress")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasColumnName("ClientName")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Comments")
                        .HasColumnName("Comments")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasMaxLength(40);

                    b.Property<string>("CorrelationId")
                        .HasColumnName("CorrelationId")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("Exceptions")
                        .HasColumnName("Exceptions")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<int>("ExecutionDuration")
                        .HasColumnName("ExecutionDuration")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("HttpMethod")
                        .HasColumnName("HttpMethod")
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<int?>("HttpStatusCode")
                        .HasColumnName("HttpStatusCode")
                        .HasColumnType("int");

                    b.Property<Guid?>("ImpersonatorTenantId")
                        .HasColumnName("ImpersonatorTenantId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ImpersonatorUserId")
                        .HasColumnName("ImpersonatorUserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("TenantName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Url")
                        .HasColumnName("Url")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<Guid?>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserName")
                        .HasColumnName("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId", "ExecutionTime");

                    b.ToTable("AbpAuditLogs");
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AuditLogId")
                        .HasColumnName("AuditLogId")
                        .HasColumnType("char(36)");

                    b.Property<int>("ExecutionDuration")
                        .HasColumnName("ExecutionDuration")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnName("ExecutionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MethodName")
                        .HasColumnName("MethodName")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Parameters")
                        .HasColumnName("Parameters")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<string>("ServiceName")
                        .HasColumnName("ServiceName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AuditLogId");

                    b.HasIndex("TenantId", "ServiceName", "MethodName", "ExecutionTime");

                    b.ToTable("AbpAuditLogActions");
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AuditLogId")
                        .HasColumnName("AuditLogId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangeTime")
                        .HasColumnName("ChangeTime")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("ChangeType")
                        .HasColumnName("ChangeType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnName("EntityId")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<Guid?>("EntityTenantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("EntityTypeFullName")
                        .IsRequired()
                        .HasColumnName("EntityTypeFullName")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AuditLogId");

                    b.HasIndex("TenantId", "EntityTypeFullName", "EntityId");

                    b.ToTable("AbpEntityChanges");
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityPropertyChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EntityChangeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("NewValue")
                        .HasColumnName("NewValue")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("OriginalValue")
                        .HasColumnName("OriginalValue")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasColumnName("PropertyName")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("PropertyTypeFullName")
                        .IsRequired()
                        .HasColumnName("PropertyTypeFullName")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("AbpEntityPropertyChanges");
                });

            modelBuilder.Entity("Volo.Abp.BackgroundJobs.BackgroundJobRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsAbandoned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(1048576);

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("LastTryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("NextTryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasDefaultValue((byte)15);

                    b.Property<short>("TryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.HasKey("Id");

                    b.HasIndex("IsAbandoned", "NextTryTime");

                    b.ToTable("AbpBackgroundJobs");
                });

            modelBuilder.Entity("Volo.Abp.FeatureManagement.FeatureValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("ProviderName")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("Name", "ProviderName", "ProviderKey");

                    b.ToTable("AbpFeatureValues");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityClaimType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasMaxLength(40);

                    b.Property<string>("Description")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("Regex")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("RegexDescription")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<bool>("Required")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ValueType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AbpClaimTypes");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasMaxLength(40);

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDefault")
                        .HasColumnName("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublic")
                        .HasColumnName("IsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsStatic")
                        .HasColumnName("IsStatic")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName");

                    b.ToTable("AbpRoles");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityRoleClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar(1024) CHARACTER SET utf8mb4")
                        .HasMaxLength(1024);

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AbpRoleClaims");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AccessFailedCount")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EmailConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("LockoutEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LockoutEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasColumnName("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasColumnName("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("PasswordHash")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("PhoneNumber")
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<bool>("PhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnName("SecurityStamp")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("Surname")
                        .HasColumnName("Surname")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("TwoFactorEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("NormalizedEmail");

                    b.HasIndex("NormalizedUserName");

                    b.HasIndex("UserName");

                    b.ToTable("AbpUsers");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar(1024) CHARACTER SET utf8mb4")
                        .HasMaxLength(1024);

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AbpUserClaims");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserLogin", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("varchar(196) CHARACTER SET utf8mb4")
                        .HasMaxLength(196);

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "LoginProvider");

                    b.HasIndex("LoginProvider", "ProviderKey");

                    b.ToTable("AbpUserLogins");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserOrganizationUnit", b =>
                {
                    b.Property<Guid>("OrganizationUnitId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("char(36)");

                    b.HasKey("OrganizationUnitId", "UserId");

                    b.HasIndex("UserId", "OrganizationUnitId");

                    b.ToTable("AbpUserOrganizationUnits");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId", "UserId");

                    b.ToTable("AbpUserRoles");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AbpUserTokens");
                });

            modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("Code")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4")
                        .HasMaxLength(95);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnName("DisplayName")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("ParentId");

                    b.ToTable("AbpOrganizationUnits");
                });

            modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnitRole", b =>
                {
                    b.Property<Guid>("OrganizationUnitId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("char(36)");

                    b.HasKey("OrganizationUnitId", "RoleId");

                    b.HasIndex("RoleId", "OrganizationUnitId");

                    b.ToTable("AbpOrganizationUnitRoles");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.ApiResources.ApiResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<string>("DisplayName")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("Properties")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("IdentityServerApiResources");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.ApiResources.ApiResourceClaim", b =>
                {
                    b.Property<Guid>("ApiResourceId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("ApiResourceId", "Type");

                    b.ToTable("IdentityServerApiClaims");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.ApiResources.ApiScope", b =>
                {
                    b.Property<Guid>("ApiResourceId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("Description")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<string>("DisplayName")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<bool>("Emphasize")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Required")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ApiResourceId", "Name");

                    b.ToTable("IdentityServerApiScopes");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.ApiResources.ApiScopeClaim", b =>
                {
                    b.Property<Guid>("ApiResourceId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("ApiResourceId", "Name", "Type");

                    b.ToTable("IdentityServerApiScopeClaims");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.ApiResources.ApiSecret", b =>
                {
                    b.Property<Guid>("ApiResourceId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("Value")
                        .HasColumnType("varchar(300) CHARACTER SET utf8mb4")
                        .HasMaxLength(300);

                    b.Property<string>("Description")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ApiResourceId", "Type", "Value");

                    b.ToTable("IdentityServerApiSecrets");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AbsoluteRefreshTokenLifetime")
                        .HasColumnType("int");

                    b.Property<int>("AccessTokenLifetime")
                        .HasColumnType("int");

                    b.Property<int>("AccessTokenType")
                        .HasColumnType("int");

                    b.Property<bool>("AllowAccessTokensViaBrowser")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowOfflineAccess")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowPlainTextPkce")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowRememberConsent")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AlwaysIncludeUserClaimsInIdToken")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AlwaysSendClientClaims")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("AuthorizationCodeLifetime")
                        .HasColumnType("int");

                    b.Property<bool>("BackChannelLogoutSessionRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("BackChannelLogoutUri")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<string>("ClientClaimsPrefix")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("ClientName")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("ClientUri")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasMaxLength(40);

                    b.Property<int?>("ConsentLifetime")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int>("DeviceCodeLifetime")
                        .HasColumnType("int");

                    b.Property<bool>("EnableLocalLogin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("FrontChannelLogoutSessionRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FrontChannelLogoutUri")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<int>("IdentityTokenLifetime")
                        .HasColumnType("int");

                    b.Property<bool>("IncludeJwtId")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LogoUri")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<string>("PairWiseSubjectSalt")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("ProtocolType")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("RefreshTokenExpiration")
                        .HasColumnType("int");

                    b.Property<int>("RefreshTokenUsage")
                        .HasColumnType("int");

                    b.Property<bool>("RequireClientSecret")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("RequireConsent")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("RequirePkce")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SlidingRefreshTokenLifetime")
                        .HasColumnType("int");

                    b.Property<bool>("UpdateAccessTokenClaimsOnRefresh")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserCodeType")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("UserSsoLifetime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("IdentityServerClients");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientClaim", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("Value")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.HasKey("ClientId", "Type", "Value");

                    b.ToTable("IdentityServerClientClaims");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientCorsOrigin", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Origin")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150);

                    b.HasKey("ClientId", "Origin");

                    b.ToTable("IdentityServerClientCorsOrigins");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientGrantType", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<string>("GrantType")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.HasKey("ClientId", "GrantType");

                    b.ToTable("IdentityServerClientGrantTypes");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientIdPRestriction", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Provider")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("ClientId", "Provider");

                    b.ToTable("IdentityServerClientIdPRestrictions");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientPostLogoutRedirectUri", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PostLogoutRedirectUri")
                        .HasColumnType("varchar(300) CHARACTER SET utf8mb4")
                        .HasMaxLength(300);

                    b.HasKey("ClientId", "PostLogoutRedirectUri");

                    b.ToTable("IdentityServerClientPostLogoutRedirectUris");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientProperty", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Key")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.HasKey("ClientId", "Key");

                    b.ToTable("IdentityServerClientProperties");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientRedirectUri", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<string>("RedirectUri")
                        .HasColumnType("varchar(300) CHARACTER SET utf8mb4")
                        .HasMaxLength(300);

                    b.HasKey("ClientId", "RedirectUri");

                    b.ToTable("IdentityServerClientRedirectUris");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientScope", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Scope")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("ClientId", "Scope");

                    b.ToTable("IdentityServerClientScopes");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientSecret", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("Value")
                        .HasColumnType("varchar(300) CHARACTER SET utf8mb4")
                        .HasMaxLength(300);

                    b.Property<string>("Description")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ClientId", "Type", "Value");

                    b.ToTable("IdentityServerClientSecrets");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Devices.DeviceFlowCodes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(50000);

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SubjectId")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.HasIndex("UserCode")
                        .IsUnique();

                    b.ToTable("IdentityServerDeviceFlowCodes");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Grants.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(10000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("SubjectId")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("IdentityServerPersistedGrants");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.IdentityResources.IdentityClaim", b =>
                {
                    b.Property<Guid>("IdentityResourceId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("IdentityResourceId", "Type");

                    b.ToTable("IdentityServerIdentityClaims");
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.IdentityResources.IdentityResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<string>("DisplayName")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<bool>("Emphasize")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("Properties")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Required")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("IdentityServerIdentityResources");
                });

            modelBuilder.Entity("Volo.Abp.PermissionManagement.PermissionGrant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Name", "ProviderName", "ProviderKey");

                    b.ToTable("AbpPermissionGrants");
                });

            modelBuilder.Entity("Volo.Abp.SettingManagement.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("ProviderName")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(2048);

                    b.HasKey("Id");

                    b.HasIndex("Name", "ProviderName", "ProviderKey");

                    b.ToTable("AbpSettings");
                });

            modelBuilder.Entity("Volo.Abp.TenantManagement.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasMaxLength(40);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("AbpTenants");
                });

            modelBuilder.Entity("Volo.Abp.TenantManagement.TenantConnectionString", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(1024) CHARACTER SET utf8mb4")
                        .HasMaxLength(1024);

                    b.HasKey("TenantId", "Name");

                    b.ToTable("AbpTenantConnectionStrings");
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogAction", b =>
                {
                    b.HasOne("Volo.Abp.AuditLogging.AuditLog", null)
                        .WithMany("Actions")
                        .HasForeignKey("AuditLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                {
                    b.HasOne("Volo.Abp.AuditLogging.AuditLog", null)
                        .WithMany("EntityChanges")
                        .HasForeignKey("AuditLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityPropertyChange", b =>
                {
                    b.HasOne("Volo.Abp.AuditLogging.EntityChange", null)
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityRoleClaim", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserClaim", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserLogin", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserOrganizationUnit", b =>
                {
                    b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                        .WithMany()
                        .HasForeignKey("OrganizationUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                        .WithMany("OrganizationUnits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserRole", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserToken", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnit", b =>
                {
                    b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnitRole", b =>
                {
                    b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                        .WithMany("Roles")
                        .HasForeignKey("OrganizationUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.ApiResources.ApiResourceClaim", b =>
                {
                    b.HasOne("Volo.Abp.IdentityServer.ApiResources.ApiResource", null)
                        .WithMany("UserClaims")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.ApiResources.ApiScope", b =>
                {
                    b.HasOne("Volo.Abp.IdentityServer.ApiResources.ApiResource", null)
                        .WithMany("Scopes")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.ApiResources.ApiScopeClaim", b =>
                {
                    b.HasOne("Volo.Abp.IdentityServer.ApiResources.ApiScope", null)
                        .WithMany("UserClaims")
                        .HasForeignKey("ApiResourceId", "Name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.ApiResources.ApiSecret", b =>
                {
                    b.HasOne("Volo.Abp.IdentityServer.ApiResources.ApiResource", null)
                        .WithMany("Secrets")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientClaim", b =>
                {
                    b.HasOne("Volo.Abp.IdentityServer.Clients.Client", null)
                        .WithMany("Claims")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientCorsOrigin", b =>
                {
                    b.HasOne("Volo.Abp.IdentityServer.Clients.Client", null)
                        .WithMany("AllowedCorsOrigins")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientGrantType", b =>
                {
                    b.HasOne("Volo.Abp.IdentityServer.Clients.Client", null)
                        .WithMany("AllowedGrantTypes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientIdPRestriction", b =>
                {
                    b.HasOne("Volo.Abp.IdentityServer.Clients.Client", null)
                        .WithMany("IdentityProviderRestrictions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientPostLogoutRedirectUri", b =>
                {
                    b.HasOne("Volo.Abp.IdentityServer.Clients.Client", null)
                        .WithMany("PostLogoutRedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientProperty", b =>
                {
                    b.HasOne("Volo.Abp.IdentityServer.Clients.Client", null)
                        .WithMany("Properties")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientRedirectUri", b =>
                {
                    b.HasOne("Volo.Abp.IdentityServer.Clients.Client", null)
                        .WithMany("RedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientScope", b =>
                {
                    b.HasOne("Volo.Abp.IdentityServer.Clients.Client", null)
                        .WithMany("AllowedScopes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientSecret", b =>
                {
                    b.HasOne("Volo.Abp.IdentityServer.Clients.Client", null)
                        .WithMany("ClientSecrets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.IdentityServer.IdentityResources.IdentityClaim", b =>
                {
                    b.HasOne("Volo.Abp.IdentityServer.IdentityResources.IdentityResource", null)
                        .WithMany("UserClaims")
                        .HasForeignKey("IdentityResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.TenantManagement.TenantConnectionString", b =>
                {
                    b.HasOne("Volo.Abp.TenantManagement.Tenant", null)
                        .WithMany("ConnectionStrings")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
